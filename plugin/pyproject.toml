[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bgutil-ytdlp-pot-provider"
dynamic = ["version"]
readme = {file = "README.md", content-type = "text/markdown"}
classifiers = [
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
]
requires-python = ">=3.8"
keywords = ["yt-dlp", "yt-dlp-plugin", "yt-dlp-plugins-get-pot"]
authors = [
  { name = "Brainicism", email = "brainicism@gmail.com" },
  { name = "grqz" },
]
dependencies = [
  "yt-dlp-get-pot>=0.1.1",
]

[tool.hatch.env.default]
installer = "uv"
path = ".venv"

[tool.hatch.build.targets.wheel]
packages = ["yt_dlp_plugins"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "yt_dlp_plugins/extractor/getpot_bgutil.py"

[tool.ruff.format]
quote-style = "single"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
ignore = [
    "E402",  # module level import not at top of file
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    "E741",  # ambiguous variable name
    "UP036",   # outdated-version-block
    "B006",    # mutable-argument-default
    "B008",    # function-call-in-default-argument
    "B011",    # assert-false
    "B017",    # assert-raises-exception
    "B023",    # function-uses-loop-variable (false positives)
    "B028",    # no-explicit-stacklevel
    "B904",    # raise-without-from-inside-except
    "C401",    # unnecessary-generator-set
    "C402",    # unnecessary-generator-dict
    "PIE790",  # unnecessary-placeholder
    "SIM102",  # collapsible-if
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM112",  # uncapitalized-environment-variables
    "SIM113",  # enumerate-for-loop
    "SIM114",  # if-with-same-arms
    "SIM115",  # open-file-with-context-handler
    "SIM117",  # multiple-with-statements
    "SIM223",  # expr-and-false
    "SIM300",  # yoda-conditions
    "TD001",   # invalid-todo-tag
    "TD002",   # missing-todo-author
    "TD003",   # missing-todo-link
    "PLE0604", # invalid-all-object (false positives)
    "PLE0643", # potential-index-error (false positives)
    "PLW0603", # global-statement
    "PLW1510", # subprocess-run-without-check
    "PLW2901", # redefined-loop-name
    "RUF001",  # ambiguous-unicode-character-string
    "RUF012",  # mutable-class-default
    "RUF100",  # unused-noqa (flake8 has slightly different behavior)
]
select = [
    "E",      # pycodestyle Error
    "W",      # pycodestyle Warning
    "F",      # Pyflakes
    "I",      # isort
    "Q",      # flake8-quotes
    "N803",   # invalid-argument-name
    "N804",   # invalid-first-argument-name-for-class-method
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN003", # banned-import-from
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "RSE",    # flake8-raise
    "RET504", # unnecessary-assign
    "SIM",    # flake8-simplify
    "TID251", # banned-api
    "TD",     # flake8-todos
    "PLC",    # Pylint Convention
    "PLE",    # Pylint Error
    "PLW",    # Pylint Warning
    "RUF",    # Ruff-specific rules
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "single"
inline-quotes = "single"
avoid-escape = false

[tool.autopep8]  
max_line_length = 120
recursive = true
exit-code = true
jobs = 0
select = [
    "E101",
    "E112",
    "E113",
    "E115",
    "E116",
    "E117",
    "E121",
    "E122",
    "E123",
    "E124",
    "E125",
    "E126",
    "E127",
    "E128",
    "E129",
    "E131",
    "E201",
    "E202",
    "E203",
    "E211",
    "E221",
    "E222",
    "E223",
    "E224",
    "E225",
    "E226",
    "E227",
    "E228",
    "E231",
    "E241",
    "E242",
    "E251",
    "E252",
    "E261",
    "E262",
    "E265",
    "E266",
    "E271",
    "E272",
    "E273",
    "E274",
    "E275",
    "E301",
    "E302",
    "E303",
    "E304",
    "E305",
    "E306",
    "E502",
    "E701",
    "E702",
    "E704",
    "W391",
    "W504",
]
